apiVersion: v1
kind: ServiceAccount
metadata:
  name: neo4j-haproxy
  namespace: neo4j
  labels:
    helm.sh/chart: haproxy-1.17.3
    app.kubernetes.io/name: haproxy
    app.kubernetes.io/instance: neo4j-haproxy
    app.kubernetes.io/version: "2.6.6"
    app.kubernetes.io/managed-by: Helm
---
# Source: haproxy/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: neo4j-haproxy
  namespace: neo4j
  labels:
    helm.sh/chart: haproxy-1.17.3
    app.kubernetes.io/name: haproxy
    app.kubernetes.io/instance: neo4j-haproxy
    app.kubernetes.io/version: "2.6.6"
    app.kubernetes.io/managed-by: Helm
data:
  haproxy.cfg: |
    global
        log stdout format raw local0
        lua-load /usr/local/etc/haproxy/discovery.lua
    defaults
        log	global
        timeout	connect	5000
        timeout	client	50000
        timeout	server	50000
        timeout	tunnel	1200000
    
    frontend generic-in
        bind *:8080
        tcp-request inspect-delay 20s
        acl content_present req_len gt 0
        tcp-request content accept if content_present
        use_backend neo4j-bolt if !HTTP
        use_backend neo4j-bolt if { hdr(upgrade) -i -m str "websocket" }
        use_backend neo4j-discovery if { hdr(accept) -i -m str "application/json" }
        default_backend neo4j-http
    
    backend neo4j-http
        mode http
        option httpchk
        option forwardfor
        server neo4j-browser "${NEO4J_HTTP}" check maxconn 128
    
    backend neo4j-bolt
        mode tcp
        option tcp-check
        server neo4j-bolt "${NEO4J_BOLT}" check maxconn 2048
    backend neo4j-discovery
        mode http
        http-request use-service lua.neo4j_discovery
    

  discovery.lua: |
    local function neo4j_discovery(applet)
        local function ends_with(str, ending)
            return ending == "" or str:sub(-#ending) == ending
        end
        -- what's the client trying to access???
        local reqhost = applet.headers["host"][0]
        if not reqhost then
            core.Alert("request doesn't have host header!?")
            return
        end
        -- because the js driver will provide a default port if we don't!
        if not ends_with(reqhost, ":8080") then
            reqhost = reqhost .. ":80"
        end
        core.Info(string.format("translating discovery request with reqhost: %s", reqhost))
        
        -- look for a particular backend named "neo4j-http"
        local httpbe = core.backends["neo4j-http"]
        if not httpbe then
            core.Alert("cannot find backend named 'neo4j-http'")
            return
        end
        
        -- get the first server in our backend
        local server = nil
        for k, v in pairs(httpbe.servers) do
            server = v
            break
        end
        local host = server:get_addr()
        if not host then
            core.Alert(string.format("can't get a host value for server %s", server))
            return
        end
        
        core.Info(string.format("using backend server %s", host))
        local hdrs = {
            [1] = string.format('host: %s', host),
            [2] = 'accept: application/json',
            [3] = 'connection: close'
        }
        
        local req = {
            [1] = string.format('GET / HTTP/1.1'),
            [2] = table.concat(hdrs, '\r\n'),
            [3] = '\r\n'
        }
        
        req = table.concat(req, '\r\n')
        
        local socket = core.tcp()
        socket:settimeout(5)
        
        if socket:connect(host) then
            if socket:send(req) then
                -- pull off headers
                while true do
                    local line, _ = socket:receive('*l')
                    if not line then
                        break
                    end
                    if line == '' then
                        break
                    end
                end
                
                -- process body line by line
                local content = ""
                while true do
                    local line, _ = socket:receive('*l')
                    if not line then
                        break
                    end
                    if line == '' then
                        break
                    end
                    
                    local start = string.find(line, "//")
                    if start ~= nil then
                        local finish = string.find(line, '[/"]', start + 2)
                        content = content .. string.sub(line, 1, start + 1) .. reqhost .. string.sub(line, finish) .. "\n"
                    else
                        content = content .. line .. "\n"
                    end
                end
                if content then
                    applet:set_status(200)
                    applet:add_header('content-length', string.len(content))
                    applet:add_header('content-type', 'application/json')
                    applet:start_response()
                    applet:send(content)
                end
            else
                core.Alert('Could not connect to Neo4j')
            end
            
            socket:close()
        else
            core.Alert('Could not connecto to Neo4j')
        end

    end

    core.register_service('neo4j_discovery', 'http', neo4j_discovery)

---
# Source: haproxy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: neo4j-haproxy
  namespace: neo4j
  labels:
    helm.sh/chart: haproxy-1.17.3
    app.kubernetes.io/name: haproxy
    app.kubernetes.io/instance: neo4j-haproxy
    app.kubernetes.io/version: "2.6.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: haproxy
    app.kubernetes.io/instance: neo4j-haproxy
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: http
    - name: https
      protocol: TCP
      port: 443
      targetPort: https
    - name: stat
      protocol: TCP
      port: 1024
      targetPort: stat
---
# Source: haproxy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neo4j-haproxy
  namespace: neo4j
  labels:
    helm.sh/chart: haproxy-1.17.3
    app.kubernetes.io/name: haproxy
    app.kubernetes.io/instance: neo4j-haproxy
    app.kubernetes.io/version: "2.6.6"
    app.kubernetes.io/managed-by: Helm
spec:
  minReadySeconds: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: haproxy
      app.kubernetes.io/instance: neo4j-haproxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: haproxy
        app.kubernetes.io/instance: neo4j-haproxy
    spec:
      serviceAccountName: neo4j-haproxy
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      volumes:
        - name: haproxy-config
          configMap:
            name: neo4j-haproxy
      containers:
        - name: haproxy
          image: "haproxytech/haproxy-alpine:2.6.6"
          imagePullPolicy: IfNotPresent
          args:
            - -f
            - /usr/local/etc/haproxy/haproxy.cfg
          env:
            - name: NEO4J_HTTP
              value: "ingress-haproxy-lb-neo4j:7474/browser"
            - name: NEO4J_BOLT
              value: "ingress-haproxy-lb-neo4j:7687"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: stat
              containerPort: 1024
              protocol: TCP
          resources:
            requests:
              cpu: 250m
              memory: 128Mi
          volumeMounts:
            - name: haproxy-config
              mountPath: /usr/local/etc/haproxy/haproxy.cfg
              subPath: haproxy.cfg
            - name: haproxy-config
              mountPath: /usr/local/etc/haproxy/discovery.lua
              subPath: discovery.lua
